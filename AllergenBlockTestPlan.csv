Test ID,Scenario,Detailed Command Prompt(s),Expected Outcome
GET-1,Missing Parameters,"curl -X GET ""http://localhost:3000/api/maps""","400 Bad Request with { error: 'Restaurant name, latitude, and longitude are required' }"
GET-2,Invalid Coordinates,"curl -X GET ""http://localhost:3000/api/maps?restaurantName=PizzaPalace&lat=NaN&lng=abc""",400 Bad Request or parse error if numeric validation is strict
GET-3,Exact Match Found,"(A) Insert in DB: { restaurantName:'Pizza Palace', location:{ type:'Point', coordinates:[-122.4194,37.7749] }, menuItems:[...]}  THEN  curl -X GET ""http://localhost:3000/api/maps?restaurantName=Pizza+Palace&lat=37.7749&lng=-122.4194""",200 OK with { items:[...] }
GET-4,Similar Match (≥80%),"(A) Insert in DB: { restaurantName:'Pizza Palace & Grill', location:{ type:'Point', coordinates:[-122.4194,37.7749] }, menuItems:[...] }  THEN  curl -X GET ""http://localhost:3000/api/maps?restaurantName=PizzaPalac&lat=37.7749&lng=-122.4194""",200 OK if fallback >=0.8; returns matched menu
GET-5,No Match,"curl -X GET ""http://localhost:3000/api/maps?restaurantName=Burger+World&lat=37.7749&lng=-122.4194""",404 Not Found with { error: 'Menu not found...' }
GET-6,DB Error,"Stop Mongo or break credentials, then curl -X GET ""http://localhost:3000/api/maps?restaurantName=Pizza+Palace&lat=37.7749&lng=-122.4194""",500 Internal Server Error with { error: 'Internal server error' }
,,,
POST-1,Missing location,"curl -X POST -H ""Content-Type: application/json"" -d '{ ""source"":""camera"" }' http://localhost:3000/api/maps",400 Bad Request with { error: 'Location is required' }
POST-2,Invalid location,"curl -X POST -H ""Content-Type: application/json"" -d '{ ""location"":{""lat"":""notanumber"",""lng"":123}, ""source"":""camera"" }' http://localhost:3000/api/maps",400 Bad Request or parse error
POST-3,No Restaurants Nearby,"curl -X POST -H ""Content-Type: application/json"" -d '{ ""location"":{""lat"":0,""lng"":0} }' http://localhost:3000/api/maps","200 OK, likely returns { location:{...}, restaurants: [] }"
POST-4,"Some Restaurants, No Local Menus","curl -X POST -H ""Content-Type: application/json"" -d '{ ""location"":{""lat"":37.7749,""lng"":-122.4194} }' http://localhost:3000/api/maps","200 OK with each restaurant: { name, location, menuContext:null }"
POST-5,Partial Name Match in DB,"(A) Insert doc in DB: 'Pizza Palace & Grill' at coords  (B) curl -X POST -H ""Content-Type: application/json"" -d '{ ""location"":{""lat"":37.7749,""lng"":-122.4194} }' http://localhost:3000/api/maps",200 OK if similarity≥0.8 => returns matching menuContext; else null
POST-6,Large Result Set,"curl -X POST -H ""Content-Type: application/json"" -d '{ ""location"":{""lat"":40.758,""lng"":-73.985} }' http://localhost:3000/api/maps",200 OK with many restaurants; watch performance
POST-7,DB Error,"Stop MongoDB or break credentials, then curl -X POST -H ""Content-Type: application/json"" -d '{ ""location"":{""lat"":37.7749,""lng"":-122.4194} }' http://localhost:3000/api/maps",500 Internal Server Error with { error: 'Internal server error' }
,,,
HELPER-1,checkGoogleMapsRestaurant - Exact,"node -e ""(async()=>{const{{checkGoogleMapsRestaurant}}=require('./lib/mapsService');console.log(await checkGoogleMapsRestaurant('Pizza Palace',{lat:37.7749,lng:-122.4194}))})();""",true if found; false otherwise
HELPER-2,checkGoogleMapsRestaurant - No Match,"node -e ""(async()=>{const{{checkGoogleMapsRestaurant}}=require('./lib/mapsService');console.log(await checkGoogleMapsRestaurant('RandomName',{lat:0,lng:0}))})();""",false if not found
HELPER-3,getMenuContext - Exact,"node -e ""(async()=>{const{{getMenuContext}}=require('./lib/menuService');console.log(await getMenuContext('Pizza Palace',{lat:37.7749,lng:-122.4194}))})();""",Returns { items:[...] } if found within 100m
HELPER-4,getMenuContext - Similar,"node -e ""(async()=>{const{{getMenuContext}}=require('./lib/menuService');console.log(await getMenuContext('Pizza Palac',{lat:37.7749,lng:-122.4194}))})();""",Fallback if≥0.8 similarity
HELPER-5,storeMenuContext,"node -e ""(async()=>{const{{storeMenuContext}}=require('./lib/menuService');const success=await storeMenuContext('Pizza Palace',{lat:37.7749,lng:-122.4194},[{{name:'Pepperoni Pizza',allergens:['dairy','gluten']}}]);console.log(success)})();""","Inserts doc, logs true"
HELPER-6,storeRestaurantInfo - camera,"node -e ""(async()=>{const{{storeRestaurantInfo}}=require('./lib/restaurantService');await storeRestaurantInfo('Pizza Palace',{lat:37.7749,lng:-122.4194},[{{name:'Margherita',allergens:['dairy']}}],'camera')})();""",If found on Google => only store menu; if not => store restaurant & menu
HELPER-7,requestCameraCapture,"node -e ""(async()=>{const{{requestCameraCapture}}=require('./lib/cameraService');console.log(await requestCameraCapture('Pizza Palace',{lat:37.7749,lng:-122.4194}))})();""",true (stub)
HELPER-8,calculateStringSimilarity,"node -e ""const{{calculateStringSimilarity}}=require('./utils/stringSimilarity');console.log(calculateStringSimilarity('Pizza Palace','PizzaPalac'))""",~0.8+ for partial match